#!groovy

def NOETIC_DOCKER_IMAGE = "docker.robopec.com/ci-ros-base-focal"
def MELODIC_DOCKER_IMAGE = "docker.robopec.com/ci-ros-melodic-perception-bionic"
def PACKAGE_NAME = "p_rosbridge_server_cpp"

def coverageBadge = addEmbeddableBadgeConfiguration(id: "coverage", subject: "Coverage")

pipeline {
    agent { label 'x64' }
    stages {
        stage('Prepare Common WS') {
            steps {
                // Clean up
                sh 'rm -rf *'

                // Download coverage utils
                sh 'wget https://github.com/romainreignier/lcov_badge_generator/releases/latest/download/lcov_badge_generator'
                sh 'chmod +x lcov_badge_generator'

                // Install latest version of rosunit to handle p_rosbridge_server_cpp Qt tests
                dir('tmp')
                {
                    sh 'git clone --depth=1 https://github.com/ros/ros'
                    sh 'cp -r ros/tools/rosunit ../rosunit'
                    sh 'rm -rf ros || true'
                }
            }
        }
        stage('Prepare Melodic WS') {
            steps {
                dir("melodic_ws/src/${PACKAGE_NAME}") {
                    checkout scm
                }
                dir('melodic_ws/src') {
                    sh """
                        cp ${PACKAGE_NAME}/${PACKAGE_NAME}/.jenkins/rosinstall .rosinstall
                        wstool update -j `nproc --ignore=2` || true
                        cp -r ../../rosunit .
                    """
                }
            }
        }
        stage('Build Melodic') {
            agent {
                docker {
                    image "${MELODIC_DOCKER_IMAGE}"
                    reuseNode true
                }
            }
            steps {
                dir('melodic_ws'){
                    sh """
                        . /opt/ros/\$ROS_DISTRO/setup.sh
                        export PYTHONIOENCODING=UTF-8
                        export ROS_HOME=\$PWD
                        catkin init
                        catkin config --install --cmake-args -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS='-Wall' -DDISABLE_GUI:BOOL=ON -DCATKIN_ENABLE_TESTING=1 -DENABLE_COVERAGE_TESTING=ON
                        catkin build --no-status -j `nproc --ignore=2`
                    """
                }
            }
        }
        stage('Tests Melodic') {
            agent {
                docker {
                    image "${MELODIC_DOCKER_IMAGE}"
                    reuseNode true
                }
            }
            steps{
                dir("melodic_ws") {
                    sh """
                        . /opt/ros/\$ROS_DISTRO/setup.sh
                        export PYTHONIOENCODING=UTF-8
                        export ROS_HOME=\$PWD
                        catkin build -j4 ${PACKAGE_NAME} -v --no-deps --catkin-make-args ${PACKAGE_NAME}_coverage_report
                    """
                    sh "gcovr -x -r src/${PACKAGE_NAME}/${PACKAGE_NAME}/src build/${PACKAGE_NAME} -e '.*/nlohmann/.*\\.hpp' --xml-pretty -o build/${PACKAGE_NAME}/coverage.xml"
                    // Copy source files in root dir for the coverage plugin to find them
                    // Workaround until https://github.com/jenkinsci/code-coverage-api-plugin/pull/265 is merged and released
                    sh "cp -r src/${PACKAGE_NAME}/${PACKAGE_NAME}/src .."
                    // Generate custom badge
                    script {
                        coveragePercent = sh(returnStdout: true, script: "../lcov_badge_generator -p build/${PACKAGE_NAME}/${PACKAGE_NAME}_coverage_report/index.html")
                        coverageBadge.setStatus(coveragePercent)
                    }
                }
                junit 'melodic_ws/**/**/test_results/**/*.xml'
            }
        }
        stage('Prepare Noetic WS') {
            steps {
                dir("noetic_ws/src/${PACKAGE_NAME}") {
                    checkout scm
                }
                dir('noetic_ws/src') {
                    sh """
                        cp ${PACKAGE_NAME}/${PACKAGE_NAME}/.jenkins/rosinstall .rosinstall
                        wstool update -j `nproc --ignore=2` || true
                        cp -r ../../rosunit .
                    """
                }
            }
        }
        stage('Build Noetic') {
            agent {
                docker {
                    image "${NOETIC_DOCKER_IMAGE}"
                    reuseNode true
                }
            }
            steps {
                dir('noetic_ws'){
                    sh """
                        . /opt/ros/\$ROS_DISTRO/setup.sh
                        export PYTHONIOENCODING=UTF-8
                        catkin init
                        catkin config --install --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS='-Wall' -DDISABLE_GUI:BOOL=ON -DCATKIN_ENABLE_TESTING=1
                        catkin build --no-status -j `nproc --ignore=2`
                    """
                }
            }
        }
        stage('Tests Noetic') {
            agent {
                docker {
                    image "${NOETIC_DOCKER_IMAGE}"
                    reuseNode true
                }
            }
            steps{
                dir("noetic_ws") {
                    sh """
                        . /opt/ros/\$ROS_DISTRO/setup.sh
                        export PYTHONIOENCODING=UTF-8
                        catkin run_tests --no-deps -j1 ${PACKAGE_NAME}
                    """
                }
                junit 'noetic_ws/**/**/test_results/**/*.xml'
            }
        }
    }
    post {
        always {
            sh "docker rmi ${NOETIC_DOCKER_IMAGE} || true"
            sh "docker rmi ${MELODIC_DOCKER_IMAGE} || true"
            recordIssues tool: gcc()
            publishCoverage adapters: [coberturaAdapter("melodic_ws/build/${PACKAGE_NAME}/coverage.xml")], sourceFileResolver: sourceFiles('STORE_ALL_BUILD')
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
            }
            publishHTML (target: [
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: "melodic_ws/build/${PACKAGE_NAME}/${PACKAGE_NAME}_coverage_report",
                reportFiles: 'index.html',
                reportName: "LCOV Report"
            ])
        }
        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p><font size="8" color="red">Build Failure!</font></p>
                <p>FAILED: Job <a href='${BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>:</p>
                <p>Check console output at "<a href='${BUILD_URL}consoleText'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
                to: "rre@robopec.com",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'CulpritsRecipientProvider']]
            )
        }
    }
}
